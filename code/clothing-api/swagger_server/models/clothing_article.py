# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util
import json


class ClothingArticle(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, price: float=None, category: str=None):  # noqa: E501
        """ClothingArticle - a model defined in Swagger

        :param id: The id of this ClothingArticle.  # noqa: E501
        :type id: int
        :param price: The price of this ClothingArticle.  # noqa: E501
        :type price: float
        :param category: The category of this ClothingArticle.  # noqa: E501
        :type category: str
        """
        self.swagger_types = {
            'id': int,
            'price': float,
            'category': str
        }

        self.attribute_map = {
            'id': 'id',
            'price': 'price',
            'category': 'category'
        }

        self._id = id
        self._price = price
        self._category = category

    @classmethod
    def from_dict(cls, dikt) -> 'ClothingArticle':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ClothingArticle of this ClothingArticle.  # noqa: E501
        :rtype: ClothingArticle
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this ClothingArticle.

        Unique identifier for the clothing article  # noqa: E501

        :return: The id of this ClothingArticle.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this ClothingArticle.

        Unique identifier for the clothing article  # noqa: E501

        :param id: The id of this ClothingArticle.
        :type id: int
        """

        self._id = id

    @property
    def price(self) -> float:
        """Gets the price of this ClothingArticle.

        Price of the clothing article  # noqa: E501

        :return: The price of this ClothingArticle.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float):
        """Sets the price of this ClothingArticle.

        Price of the clothing article  # noqa: E501

        :param price: The price of this ClothingArticle.
        :type price: float
        """

        self._price = price

    @property
    def category(self) -> str:
        """Gets the category of this ClothingArticle.

        Category of the clothing article  # noqa: E501

        :return: The category of this ClothingArticle.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category: str):
        """Sets the category of this ClothingArticle.

        Category of the clothing article  # noqa: E501

        :param category: The category of this ClothingArticle.
        :type category: str
        """

        self._category = category
    
    def to_dict(self):
        return {
            'id': self.id,
            'category': self.category,
            'price': self.price
        }
    
    def __iter__(self):
        yield 'id', self.id
        yield 'price', self.price
        yield 'category', self.category

    def __str__(self):
        return f"ClothingArticle(id={self.id}, price={self.price}, category={self.category})"

    def to_json(self):
        return json.dumps(dict(self))

    def __repr__(self):
        return f"ClothingArticle(id={self.id}, price={self.price}, category={self.category})"